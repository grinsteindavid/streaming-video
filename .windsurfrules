# Best Practices for Next.js & React Projects

## Project Structure
- `/app` - App router routes and layouts (Next.js 13+)
- `/components` - Reusable UI components
  - `/ui` - Basic UI elements
  - `/layout` - Layout components
  - `/features` - Feature-specific components
- `/lib` - Utility functions and shared logic
- `/hooks` - Custom React hooks
- `/context` - React context providers
- `/types` - TypeScript type definitions
- `/public` - Static assets
- `/styles` - Global styles and theme configuration
- `/services` - API service layers and data fetching
- `/config` - Application configuration

## Next.js Practices
- Use the App Router for new projects
- Implement server components where possible
- Use route handlers for API endpoints
- Implement proper error boundaries
- Optimize images with next/image
- Use next/font for font optimization
- Implement proper metadata for SEO

## React Practices
- Use functional components with hooks
- Implement proper state management (Context API, Redux Toolkit, Zustand)
- Create custom hooks for reusable logic
- Implement proper error boundaries
- Use React.memo for performance optimization
- Implement proper prop validation

## Component Structure
- Implement container components for business logic
- Use presentational components for UI rendering
- Separate concerns between data fetching/processing and presentation
- Pass data to presentational components via props
- Use custom hooks to abstract reusable logic
- Follow composition pattern for component building
- Implement proper prop drilling alternatives (Context, composition)
- Keep components focused on a single responsibility
- Use proper component memoization strategies

## React Query Best Practices
- Use QueryClient provider at application root
- Implement proper query keys with array structure
- Set appropriate staleTime and cacheTime for queries
- Use query invalidation for data refetching
- Implement optimistic updates for mutations
- Handle loading and error states consistently
- Use placeholderData or initialData for better UX
- Implement query prefetching for anticipated data needs
- Use dependent queries when queries depend on each other
- Leverage query cancellation for abandoned requests

## Mocking Best Practices
- Use MSW (Mock Service Worker) for API mocking
- Create consistent mock data structures
- Implement realistic response delays
- Test both success and error scenarios
- Organize mocks by feature or resource type
- Make mocks easily toggleable for development
- Keep mock data close to production data shape
- Use factories for generating dynamic mock data
- Implement proper error simulation
- Document mock API behavior for team reference


## OOP Principles
- Apply SOLID principles:
  - Single Responsibility Principle
  - Open/Closed Principle
  - Liskov Substitution Principle
  - Interface Segregation Principle
  - Dependency Inversion Principle
- Use composition over inheritance
- Implement proper encapsulation
- Create clear interfaces for components and services

## Code Organization
- Consistent file naming convention (kebab-case for files, PascalCase for components)
- Co-locate related files (component, styles, tests, stories) in the same directory
- Implement feature-based folder structure with domain-driven boundaries
- Use barrel files (index.ts) for clean exports and public APIs
- Keep files under 300 lines of code when possible
- Limit function/method length to 30-50 lines
- Follow single responsibility principle for classes and components
- Group related functionality into cohesive modules
- Use meaningful directory names that reflect their purpose
- Organize imports with external dependencies first, then internal modules
- Implement consistent code formatting with tools like Prettier
- Keep nesting depth to a maximum of 3-4 levels in component trees
- Implement proper error boundaries

## Testing Strategy
- Unit tests for utilities and hooks
- Component tests with React Testing Library
- E2E tests with Cypress or Playwright
- Implement proper test coverage metrics

## CI/CD
- Implement workspace-aware CI/CD pipelines
- Only build/test affected packages
- Use proper caching strategies
- Implement proper versioning strategy

## Dependencies
- Use workspace dependencies for internal packages
- Hoist common dependencies to root
- Implement strict versioning policies
- Regular dependency audits and updates


## AI Agent Guidelines
- Respond only to the specific request or query
- Do not generate unrequested code or explanations
- Maintain consistent formatting with the surrounding code
- Respect the established project structure and conventions
- Avoid making assumptions about requirements not explicitly stated
- Do not add features beyond what was specifically requested
- Keep responses concise and focused on the immediate task
- Provide only the information needed to address the specific request
- Respect the existing code style, naming conventions, and patterns
- When uncertain about requirements, ask clarifying questions rather than guessing


# C# Microservices API Best Practices

## Single Responsibility Principle
Controllers should only handle HTTP requests and responses, not implement business logic
Testability: These health check operations would be easier to test if separated
Reusability: Other parts of the application might need these health checks
Maintainability: The controller is too large and does too many things

## Project Structure
- `/src` - Main source code
  - `/API` - API controllers and endpoints
  - `/Application` - Application services and business logic
  - `/Domain` - Domain entities, interfaces, and business rules
  - `/Infrastructure` - Data access, external services integration
- `/tests` - Test projects
  - `/Unit` - Unit tests
  - `/Integration` - Integration tests
  - `/Functional` - API endpoint tests

## Architecture Patterns
- Implement Clean Architecture or Onion Architecture
- Separate concerns with CQRS (Command Query Responsibility Segregation)
- Use Mediator pattern with MediatR for handling commands and queries
- Implement Repository pattern for data access abstraction
- Use Domain-Driven Design (DDD) principles for complex domains
- Apply Vertical Slice Architecture for feature organization

## API Design
- Follow RESTful API design principles
- Use consistent URL naming conventions (plural nouns for resources)
- Implement proper HTTP status codes and error responses
- Use API versioning (URL, header, or content negotiation)
- Implement proper request validation with FluentValidation
- Use Swagger/OpenAPI for documentation
- Implement proper pagination, filtering, and sorting
- Use Problem Details (RFC 7807) for standardized error responses

## Dependency Injection
- Use built-in .NET Core DI container or Autofac for more complex scenarios
- Register services with appropriate lifetimes (Singleton, Scoped, Transient)
- Use interfaces for loose coupling
- Implement proper service registration extensions
- Avoid service locator anti-pattern

## Performance Optimization
- Implement response caching where appropriate
- Use asynchronous programming with async/await
- Implement proper database indexing
- Use efficient data access patterns (no N+1 queries)
- Implement proper connection pooling
- Use memory caching for frequently accessed data
- Implement proper resource disposal with IDisposable

## Security
- Implement proper authentication (JWT, OAuth2, OpenID Connect)
- Use proper authorization with role-based or policy-based access control
- Implement proper input validation and sanitization
- Use HTTPS for all communications
- Implement proper secrets management (no hardcoded secrets)
- Apply proper CORS policies
- Implement rate limiting and throttling
- Use security headers (HSTS, CSP, etc.)

## Logging and Monitoring
- Use structured logging with Serilog or NLog
- Implement proper log levels (Debug, Info, Warning, Error, Fatal)
- Use correlation IDs for request tracing
- Implement health checks and readiness probes
- Use Application Insights or other APM tools
- Implement proper exception handling and logging
- Use metrics for monitoring performance and resource usage

## Testing
- Write unit tests for business logic
- Implement integration tests for data access
- Use functional tests for API endpoints
- Implement proper test data setup and teardown
- Use mocking frameworks (Moq, NSubstitute) for dependencies
- Implement proper test coverage metrics
- Use test containers for integration testing with databases

## Configuration
- Use Options pattern for strongly-typed configuration
- Implement environment-specific configuration
- Use proper secrets management (Azure Key Vault, AWS Secrets Manager)
- Implement feature flags for controlled feature rollout
- Use configuration validation at startup

## Containerization
- Use multi-stage Docker builds for smaller images
- Implement proper health checks in Dockerfile
- Use proper base images (Alpine where possible)
- Implement proper Docker networking
- Use Docker Compose for local development
- Implement proper container orchestration (Kubernetes, Docker Swarm)

## Microservices Communication
- Use proper service discovery mechanisms
- Implement resilient communication with Polly
- Use message-based communication for asynchronous operations
- Implement proper circuit breakers and fallbacks
- Use proper API gateways for client communication
- Implement proper service-to-service authentication
- Use gRPC for high-performance internal communication

## Database Practices
- Use Entity Framework Core or Dapper for data access
- Implement proper database migrations
- Use database-per-service pattern
- Implement proper transaction management
- Use optimistic concurrency control
- Implement proper database connection management
- Use database sharding for horizontal scaling


